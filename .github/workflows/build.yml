- name: Install host tools for SF20 injection
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync unzip xz-utils kpartx parted e2fsprogs dosfstools util-linux build-essential file

      - name: Build sfsh and stage into overlay
        working-directory: sf20/shell
        run: |
          set -euo pipefail
          make clean
          make
          make install   # installs to ../overlay/usr/local/bin/sfsh
          test -x ../overlay/usr/local/bin/sfsh

      - name: Locate image (raw or zipped)
        id: findimg
        run: |
          set -euo pipefail
          shopt -s nullglob
          # Prefer any .zip with one .img inside; else take .img
          ZIPS=( **/*.zip **/*.ZIP )
          IMGS=( **/*.img **/*.IMG )
          pick=""

          if [ ${#ZIPS[@]} -gt 0 ]; then
            # Pick newest zip
            pick="$(ls -1t "${ZIPS[@]}" | head -n1)"
            echo "zip=${pick}" >> "$GITHUB_OUTPUT"
            echo "Found zip: $pick"
          elif [ ${#IMGS[@]} -gt 0 ]; then
            pick="$(ls -1t "${IMGS[@]}" | head -n1)"
            echo "img=${pick}" >> "$GITHUB_OUTPUT"
            echo "Found img: $pick"
          else
            echo "No .img or .zip image found in workspace." >&2
            exit 1
          fi

      - name: Extract .img from .zip if needed
        if: ${{ steps.findimg.outputs.zip != '' }}
        id: unzipimg
        run: |
          set -euo pipefail
          mkdir -p image_work
          unzip -o "${{ steps.findimg.outputs.zip }}" -d image_work
          IMG=$(ls -1 image_work/*.img | head -n1)
          [ -n "$IMG" ] || { echo "No .img found inside zip"; exit 1; }
          echo "img=$IMG" >> "$GITHUB_OUTPUT"
          ls -lh "$IMG"

      - name: Mount, inject SF20, unmount
        env:
          IMG_PATH: ${{ steps.unzipimg.outputs.img || steps.findimg.outputs.img }}
        run: |
          set -euo pipefail
          IMG="${IMG_PATH}"
          [ -f "$IMG" ] || { echo "IMG not found: $IMG"; exit 1; }

          echo "Using image: $IMG"

          # Setup loop + partitions
          LOOP=$(sudo losetup -f --show -P "$IMG")
          echo "LOOP=$LOOP"

          # Identify boot/root partitions (Raspberry Pi OS layout: p1=boot, p2=root)
          BOOT="${LOOP}p1"
          ROOT="${LOOP}p2"
          sudo partprobe "$LOOP" || true

          mkdir -p /mnt/sf20root /mnt/sf20boot
          sudo mount "$ROOT" /mnt/sf20root
          sudo mount "$BOOT" /mnt/sf20boot

          # Apply SF20 overlay & boot-side (tty1 override included)
          sudo sf20/scripts/sf20-apply-to-rootfs.sh /mnt/sf20root /mnt/sf20boot

          # Ensure fs is clean
          sync
          sudo umount /mnt/sf20boot || true
          sudo umount /mnt/sf20root || true
          sudo losetup -d "$LOOP" || true

      - name: Repack and upload artifact
        env:
          IMG_RAW: ${{ steps.unzipimg.outputs.img || steps.findimg.outputs.img }}
          BOARD_LABEL: ${{ inputs.board || 'rpi234' }}
        run: |
          set -euo pipefail
          mkdir -p out
          base="sf20-${BOARD_LABEL}"
          zipfile="out/${base}.zip"

          # Always zip the raw image we modified
          ( cd "$(dirname "$IMG_RAW")" && zip -9 "${GITHUB_WORKSPACE}/${zipfile}" "$(basename "$IMG_RAW")" )
          ls -lh out

      - name: Upload SF20 image artifact
        uses: actions/upload-artifact@v4
        with:
          name: sf20-${{ inputs.board || 'rpi234' }}
          path: out/*.zip
          if-no-files-found: error
