name: Build SourceForge 2.0 (DietPi base ? SF20)

on:
  workflow_dispatch:
    inputs:
      board:
        description: "Target board"
        type: choice
        required: true
        default: rpi234
        options:
          - rpi234   # Raspberry Pi 2/3/4
          - rpi5     # Raspberry Pi 5
      dietpi_url:
        description: "(Optional) URL to DietPi base .img.xz if not in repo"
        required: false
        type: string
  push:
    branches: [ main ]
    paths:
      - 'overlay/**'
      - 'os-pack/**'
      - 'dietpi-base/**'
      - '.github/workflows/build-image.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout (with Git LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      # Normalize BOARD with a default for non-dispatch triggers
      - name: Set BOARD env (default to rpi234)
        shell: bash
        run: |
          BOARD_IN="${{ github.event.inputs.board }}"
          if [ -z "$BOARD_IN" ]; then BOARD_IN="rpi234"; fi
          echo "BOARD=$BOARD_IN" >> "$GITHUB_ENV"

      - name: Resolve base filenames and labels
        id: base
        shell: bash
        run: |
          set -euo pipefail
          case "${BOARD}" in
            rpi234)
              echo "basename=DietPi_RPi234-ARMv8-Trixie" >> "$GITHUB_OUTPUT"
              echo "shortname=rpi234" >> "$GITHUB_OUTPUT"
              echo "board_label=Raspberry Pi 2/3/4" >> "$GITHUB_OUTPUT"
              ;;
            rpi5)
              echo "basename=DietPi_RPi5-ARMv8-Trixie" >> "$GITHUB_OUTPUT"
              echo "shortname=rpi5" >> "$GITHUB_OUTPUT"
              echo "board_label=Raspberry Pi 5" >> "$GITHUB_OUTPUT"
              ;;
            *)
              echo "Unknown BOARD: ${BOARD}" >&2
              exit 1
              ;;
          esac

      - name: Ensure DietPi base is present (download if missing)
        shell: bash
        run: |
          set -euo pipefail
          BASENAME="${{ steps.base.outputs.basename }}"
          DEST="dietpi-base/${BASENAME}.img.xz"

          if [[ -f "$DEST" ]]; then
            echo "Found $DEST"
            exit 0
          fi

          URL_INPUT="${{ github.event.inputs.dietpi_url }}"
          if [[ -z "${URL_INPUT}" ]]; then
            echo "ERROR: Missing $DEST and no 'dietpi_url' provided." >&2
            exit 1
          fi

          mkdir -p dietpi-base
          echo "Downloading: $URL_INPUT"
          curl -fL --retry 5 --retry-delay 3 -o "$DEST" "$URL_INPUT"

      - name: Validate DietPi base is real (not an LFS pointer)
        shell: bash
        run: |
          set -euo pipefail
          BASENAME="${{ steps.base.outputs.basename }}"
          ls -lh "dietpi-base/${BASENAME}.img.xz"
          file "dietpi-base/${BASENAME}.img.xz" || true
          if ! xz -t "dietpi-base/${BASENAME}.img.xz" 2>/dev/null; then
            echo "ERROR: ${BASENAME}.img.xz is not a valid xz (possibly an unfetched LFS pointer)." >&2
            exit 1
          fi

      - name: Sanity checks (overlay + boot-side)
        shell: bash
        run: |
          set -e
          required=(
            overlay/usr/local/bin/sourceforge-term
            overlay/etc/systemd/system/sf20-terminal-tty1.service
            overlay/usr/local/sf20/first-boot.sh
            overlay/etc/profile.d/10-sf20-main.sh
            overlay/usr/share/plymouth/themes/sourceforge/sourceforge.plymouth
            overlay/usr/share/plymouth/themes/sourceforge/sourceforge.script
            os-pack/boot-side/sf20/sf20.repourl
          )
          missing=0
          for f in "${required[@]}"; do
            if [[ ! -f "$f" ]]; then
              echo "MISSING: $f"
              missing=1
            else
              echo "ok     : $f"
            fi
          done
          if [[ -d overlay/boot ]]; then
            echo "ERROR: overlay/boot must NOT exist (use os-pack/boot-side)" >&2
            exit 1
          fi
          [[ $missing -eq 0 ]]

      - name: Install build deps
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y xz-utils rsync kpartx parted e2fsprogs dosfstools util-linux

      - name: Pre-clean mount points (best effort)
        if: always()
        shell: bash
        run: |
          sudo umount /mnt/imgboot 2>/dev/null || true
          sudo umount /mnt/imgroot 2>/dev/null || true
          sudo rm -rf /mnt/imgboot /mnt/imgroot
          sudo mkdir -p /mnt/imgroot /mnt/imgboot
          sudo chown "$USER":"$USER" /mnt/imgroot /mnt/imgboot || true

      - name: Prepare workspace (unxz base)
        shell: bash
        run: |
          set -euxo pipefail
          BASENAME="${{ steps.base.outputs.basename }}"
          mkdir -p build
          cp "dietpi-base/${BASENAME}.img.xz" build/
          cd build
          unxz -T0 "${BASENAME}.img.xz"
          ls -lh

      - name: Map & mount image partitions
        id: mount
        shell: bash
        run: |
          set -euxo pipefail
          BASENAME="${{ steps.base.outputs.basename }}"
          IMG="build/${BASENAME}.img"
          LOOP=$(sudo losetup -f --show -P "$IMG")
          echo "LOOP=$LOOP" >> "$GITHUB_ENV"
          sudo partprobe "$LOOP" || true
          sudo fdisk -l "$LOOP" || true
          sudo mount ${LOOP}p2 /mnt/imgroot
          sudo mount ${LOOP}p1 /mnt/imgboot
          ls -la /mnt/imgboot || true
          ls -la /mnt/imgroot || true

      - name: Apply overlay (root filesystem) + boot-side
        shell: bash
        run: |
          set -euxo pipefail
          # Root overlay
          sudo rsync -a overlay/ /mnt/imgroot/
          sudo chmod +x /mnt/imgroot/usr/local/bin/sourceforge-term || true
          sudo chmod +x /mnt/imgroot/usr/local/sf20/first-boot.sh || true

          # If your sfsh is built in-repo (e.g., shell/sfsh), install it:
          if [[ -f shell/sfsh ]]; then
            sudo install -m 0755 shell/sfsh /mnt/imgroot/usr/local/bin/sfsh
          fi

          # Boot-side (FAT-safe rsync)
          sudo mkdir -p /mnt/imgboot/sf20
          sudo rsync -rltD --no-perms --no-owner --no-group --modify-window=2 \
            os-pack/boot-side/sf20/ /mnt/imgboot/sf20/

      - name: Neutralize DietPi & set SF20 as the OS (own init/tty1/shell)
        shell: bash
        run: |
          set -euxo pipefail

          ROOT=/mnt/imgroot
          BOOT=/mnt/imgboot

          echo "== 1) Mask DietPi boot pipeline =="
          for svc in dietpi-preboot dietpi-boot dietpi-firstboot dietpi-postboot dietpi-wifi-monitor dietpi-wait-for-network
          do
            if [ -f "$ROOT/etc/systemd/system/${svc}.service" ] || [ -f "$ROOT/lib/systemd/system/${svc}.service" ]; then
              sudo systemctl --root="$ROOT" disable "${svc}" || true
              sudo ln -sf /dev/null "$ROOT/etc/systemd/system/${svc}.service"
              echo "masked ${svc}"
            fi
          done

          echo "== 2) Own tty1 (replace getty@tty1 with sf20-terminal-tty1) =="
          sudo systemctl --root="$ROOT" disable getty@tty1.service || true
          sudo ln -sf /dev/null "$ROOT/etc/systemd/system/getty@tty1.service"
          sudo systemctl --root="$ROOT" enable sf20-terminal-tty1.service || true

          echo "== 3) Make sfsh the real root shell =="
          if [ -f "$ROOT/etc/passwd" ]; then
            sudo cp "$ROOT/etc/passwd" "$ROOT/etc/passwd.sf20.bak"
            sudo awk -F: 'BEGIN{OFS=":"} $1=="root"{ $7="/usr/local/bin/sfsh" } {print}' \
              "$ROOT/etc/passwd.sf20.bak" | sudo tee "$ROOT/etc/passwd" >/dev/null
          fi

          echo "== 4) Remove DietPi branding =="
          sudo rm -f "$ROOT/etc/update-motd.d/"*dietpi* 2>/dev/null || true
          echo "SourceForge 2.0 OS" | sudo tee "$ROOT/etc/issue" >/dev/null
          echo "SourceForge 2.0 OS" | sudo tee "$ROOT/etc/issue.net" >/dev/null
          sudo rm -f "$ROOT/etc/profile.d/"*dietpi* 2>/dev/null || true

          echo "== 5) Kill DietPi boot config on /boot =="
          sudo rm -f "$BOOT/dietpi.txt" "$BOOT/dietpi-wifi.txt" 2>/dev/null || true

          echo "== 6) Ensure our terminal/shell exist and are executable =="
          sudo chmod +x "$ROOT/usr/local/bin/sourceforge-term" || true
          if [ -f "$ROOT/usr/local/bin/sfsh" ]; then
            sudo chmod +x "$ROOT/usr/local/bin/sfsh"
          fi

          echo "== 7) Set Plymouth theme to SourceForge (if present) =="
          if [ -f "$ROOT/usr/share/plymouth/themes/sourceforge/sourceforge.plymouth" ]; then
            sudo mkdir -p "$ROOT/etc/plymouth"
            cat <<'EOF' | sudo tee "$ROOT/etc/plymouth/plymouthd.conf" >/dev/null
[Daemon]
Theme=sourceforge
EOF
          fi

          echo "== 8) Final sanity output =="
          grep '^root:' "$ROOT/etc/passwd" || true
          ls -l "$ROOT/usr/local/bin/sourceforge-term" || true
          ls -l "$ROOT/usr/local/bin/sfsh" || true
          sudo systemctl --root="$ROOT" list-unit-files | grep -E 'sf20|dietpi|getty@tty1' || true

      - name: Unmount & detach
        if: always()
        shell: bash
        run: |
          set -euxo pipefail
          sync || true
          sudo umount /mnt/imgboot || true
          sudo umount /mnt/imgroot || true
          if [ -n "${LOOP:-}" ]; then sudo losetup -d "$LOOP" || true; fi
          sudo rm -rf /mnt/imgboot /mnt/imgroot || true

      - name: Recompress image (rename by board)
        shell: bash
        run: |
          set -euxo pipefail
          BASENAME="${{ steps.base.outputs.basename }}"
          SHORT="${{ steps.base.outputs.shortname }}"
          xz -9v "build/${BASENAME}.img"
          mv "build/${BASENAME}.img.xz" "build/sf20-${SHORT}.img.xz"
          ls -lh build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sf20-${{ steps.base.outputs.shortname }}
          path: build/sf20-*.img.xz
          if-no-files-found: error
