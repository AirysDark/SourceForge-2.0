name: Build SourceForge 2.0 (pi-gen from source)

on:
  workflow_dispatch:
    inputs:
      board:
        description: "Target board"
        type: choice
        required: true
        default: rpi234
        options:
          - rpi234   # Raspberry Pi 2/3/4 (arm64 image; Pi 2 may not boot 64-bit)
          - rpi5     # Raspberry Pi 5 (arm64)
  push:
    branches: [ main ]
    paths:
      - 'overlay/**'
      - 'os-pack/**'
      - 'shell/**'
      - '.github/workflows/build-pigen-sf20.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build sfsh (optional, if you keep sources in repo)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f shell/Makefile ] || [ -f shell/sfsh.c ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential
            make -C shell clean || true
            make -C shell
          fi

      - name: Install host deps (Docker)
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static debootstrap rsync xz-utils

      - name: Clone pi-gen
        run: |
          set -eux
          git clone --depth 1 https://github.com/RPi-Distro/pi-gen.git
          # Default branch builds Raspberry Pi OS Bookworm (arm64-capable)

      - name: Create SF20 custom stage inside pi-gen
        run: |
          set -euxo pipefail
          SFSTAGE="pi-gen/stage2/99-sf20"
          mkdir -p "$SFSTAGE/files"
          mkdir -p "$SFSTAGE/00-run.chroot"

          # 1) Copy our overlay into stage files/overlay (pi-gen will rsync it)
          mkdir -p "$SFSTAGE/files/overlay"
          rsync -a overlay/ "$SFSTAGE/files/overlay/"

          # If we built a local sfsh, drop it so stage installs it
          if [ -f shell/sfsh ]; then
            install -m 0755 shell/sfsh "$SFSTAGE/files/overlay/usr/local/bin/sfsh"
          fi

          # 2) Boot-side files (will be placed after export). We'll do a post-export step.
          mkdir -p "pi-gen/export-image/99-sf20-boot"
          cat > "pi-gen/export-image/99-sf20-boot/01-run.sh" <<'EOS'
          #!/bin/bash -e
          # Runs inside export stage on the mounted image root at "$ROOTFS_DIR".
          # Boot partition is at "$BOOTFS_DIR" in pi-gen export stage.
          echo "[sf20] installing boot-side files to BOOTFS..."
          mkdir -p "$BOOTFS_DIR/sf20"
          rsync -rltD --no-perms --no-owner --no-group --modify-window=2 \
            "$PWD/../../os-pack/boot-side/sf20/" "$BOOTFS_DIR/sf20/" || true
          EOS
          chmod +x "pi-gen/export-image/99-sf20-boot/01-run.sh"

          # 3) Chroot script to own tty1, set root shell, and enable services
          cat > "$SFSTAGE/00-run.chroot/01-sf20-setup" <<'EOS'
          #!/bin/bash -e
          # This runs INSIDE the chroot during stage2
          set -eux

          # ensure binaries are executable
          chmod +x /usr/local/bin/sourceforge-term || true
          if [ -f /usr/local/bin/sfsh ]; then
            chmod +x /usr/local/bin/sfsh
          fi

          # own tty1 (mask getty@tty1; our service provides the terminal)
          systemctl disable getty@tty1.service || true
          ln -sf /dev/null /etc/systemd/system/getty@tty1.service || true
          systemctl enable sf20-terminal-tty1.service || true

          # make sfsh the root shell (fallback if not present: leave /bin/bash)
          if [ -x /usr/local/bin/sfsh ]; then
            cp /etc/passwd /etc/passwd.sf20.bak
            awk -F: 'BEGIN{OFS=":"} $1=="root"{ $7="/usr/local/bin/sfsh" } {print}' \
              /etc/passwd.sf20.bak > /etc/passwd.tmp
            mv /etc/passwd.tmp /etc/passwd
          fi

          # set plymouth theme (if present). Bookworm image may not ship plymouth by default.
          if [ -f /usr/share/plymouth/themes/sourceforge/sourceforge.plymouth ]; then
            mkdir -p /etc/plymouth
            cat > /etc/plymouth/plymouthd.conf <<EOF
          [Daemon]
          Theme=sourceforge
          EOF
          fi

          # set issue banners
          echo "SourceForge 2.0 OS" > /etc/issue
          echo "SourceForge 2.0 OS" > /etc/issue.net
          EOS
          chmod +x "$SFSTAGE/00-run.chroot/01-sf20-setup"

      - name: Configure pi-gen (arm64, minimal stages)
        run: |
          set -euxo pipefail
          cat > pi-gen/config <<'EOF'
          IMG_NAME=sf20
          TARGET_HOSTNAME=sf20
          ENABLE_SSH=1
          LOCALE_DEFAULT="en_US.UTF-8"
          KEYBOARD_KEYMAP="us"
          KEYBOARD_LAYOUT="English (US)"
          TIMEZONE_DEFAULT="UTC"

          # Build aarch64 image
          BUILD_ARM64=1

          # Keep it minimal: stage0+stage1+stage2, with our 99-sf20 step
          STAGE_LIST="stage0 stage1 stage2"
          EOF

      - name: Run pi-gen in Docker
        run: |
          set -euxo pipefail
          cd pi-gen
          ./build-docker.sh

      - name: Find built image
        id: findimg
        run: |
          set -euxo pipefail
          # pi-gen writes to deploy/ by default
          ls -lh pi-gen/deploy || true
          # pick the newest .img
          IMG="$(ls -1t pi-gen/deploy/*.img 2>/dev/null | head -n1 || true)"
          if [ -z "$IMG" ]; then
            echo "No image found in pi-gen/deploy/" >&2
            exit 1
          fi
          echo "img=$IMG" >> "$GITHUB_OUTPUT"
          ls -lh "$IMG"

      - name: Rename by board & compress
        run: |
          set -euxo pipefail
          SHORT="${{ github.event.inputs.board && github.event.inputs.board || 'rpi234' }}"
          cp "${{ steps.findimg.outputs.img }}" "sf20-${SHORT}.img"
          xz -9v "sf20-${SHORT}.img"
          ls -lh "sf20-${SHORT}.img.xz"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sf20-${{ github.event.inputs.board && github.event.inputs.board || 'rpi234' }}
          path: sf20-*.img.xz
          if-no-files-found: error
