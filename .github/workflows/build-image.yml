name: Build SourceForge Image 2.0 (DietPi)

on:
  workflow_dispatch:
    inputs:
      board:
        description: "Target board"
        type: choice
        required: true
        default: "Raspberry Pi 2/3/4"
        options:
          - "Raspberry Pi 2/3/4"
          - "Raspberry Pi 5"
  push:
    branches: [ main ]
    paths:
      - "overlay/**"
      - "os-pack/**"
      - "dietpi-base/**"
      - "shell/**"
      - ".github/workflows/build-image.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 75

    env:
      BOARD_LABEL: ${{ inputs.board || 'Raspberry Pi 2/3/4' }}

    steps:
      - name: Checkout (with Git LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Resolve base image (label -> key)
        id: base
        shell: bash
        run: |
          set -euo pipefail
          case "${BOARD_LABEL}" in
            "Raspberry Pi 2/3/4") BOARD_KEY="rpi234"; BASENAME="DietPi_RPi234-ARMv8-Trixie" ;;
            "Raspberry Pi 5")     BOARD_KEY="rpi5";   BASENAME="DietPi_RPi5-ARMv8-Trixie" ;;
            *) echo "Unknown selection: ${BOARD_LABEL}" >&2; exit 1 ;;
          esac
          echo "label=${BOARD_LABEL}"   >> "$GITHUB_OUTPUT"
          echo "shortname=${BOARD_KEY}" >> "$GITHUB_OUTPUT"
          echo "basename=${BASENAME}"   >> "$GITHUB_OUTPUT"
          if [ ! -f "dietpi-base/${BASENAME}.img.xz" ]; then
            echo "Missing: dietpi-base/${BASENAME}.img.xz" >&2
            exit 1
          fi

      - name: Validate DietPi base is real (not LFS pointer)
        shell: bash
        run: |
          set -euo pipefail
          BASENAME="${{ steps.base.outputs.basename }}"
          ls -lh "dietpi-base/${BASENAME}.img.xz"
          file "dietpi-base/${BASENAME}.img.xz"
          if ! xz -t "dietpi-base/${BASENAME}.img.xz" 2>/dev/null; then
            echo "ERROR: ${BASENAME}.img.xz is not a valid xz" >&2
            exit 1
          fi

      - name: Install build deps
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            xz-utils rsync kpartx parted e2fsprogs dosfstools util-linux \
            build-essential

      # Build sfsh and run an inline smoke test (no extra files, no heredoc)
      - name: Build and test SourceForge 2.0 Shel
        working-directory: shell
        shell: bash
        run: |
          set -euo pipefail
          make clean
          make install
      
          BIN="../overlay/usr/local/bin/sfsh"
          if [ ! -x "$BIN" ]; then
            echo "sfsh binary not found at $BIN" >&2
            exit 1
          fi
      
          # version test (send 'version' then 'exit' so the shell terminates)
          out="$(printf 'version\nexit\n' | "$BIN" 2>/dev/null || true)"
          echo "$out" | grep -q "SourceForge 2.0 Shell" || { echo "version test failed"; exit 1; }
      
          # echo test (send 'echo hello' then 'exit'; expect a clean 'hello' line)
          out2="$(printf 'echo hello\nexit\n' | "$BIN" 2>/dev/null || true)"
          echo "$out2" | grep -qx "hello" || { echo "echo test failed"; exit 1; }
      
          echo "sfsh smoke tests passed"

      - name: Sanity checks (overlay/os-pack layout)
        shell: bash
        run: |
          set -e
          test -f overlay/etc/profile.d/10-sf20-main.sh
          test -f overlay/etc/systemd/system/sf20-firstboot.service
          test -f overlay/etc/systemd/system/getty@tty1.service.d/override.conf
          test -f overlay/usr/local/sf20/first-boot.sh
          test -f overlay/usr/local/bin/sourceforge-term
          test -f overlay/usr/local/bin/sourceforge.sh
          test -f overlay/usr/local/bin/sfsh
          test -f overlay/usr/local/bin/chipsh
          test -f overlay/usr/share/plymouth/themes/sourceforge/sourceforge.plymouth
          test -f overlay/usr/share/plymouth/themes/sourceforge/sourceforge.script
          test -f overlay/usr/share/plymouth/themes/sourceforge/logo.png
          test -f os-pack/boot-side/sf20/sf20.repourl
          if [ -d overlay/boot ]; then echo "overlay/boot must not exist"; exit 1; fi

      - name: Pre-clean mount points (best effort)
        if: always()
        shell: bash
        run: |
          sudo umount /mnt/imgboot 2>/dev/null || true
          sudo umount /mnt/imgroot 2>/dev/null || true
          sudo rm -rf /mnt/imgboot /mnt/imgroot
          sudo mkdir -p /mnt/imgroot /mnt/imgboot

      - name: Prepare workspace
        shell: bash
        run: |
          set -euxo pipefail
          BASENAME="${{ steps.base.outputs.basename }}"
          mkdir -p build
          cp "dietpi-base/${BASENAME}.img.xz" build/
          cd build
          unxz -T0 "${BASENAME}.img.xz"
          ls -lh

      - name: Map & mount image partitions
        shell: bash
        run: |
          set -euxo pipefail
          BASENAME="${{ steps.base.outputs.basename }}"
          IMG="build/${BASENAME}.img"
          LOOP=$(sudo losetup -f --show -P "$IMG")
          echo "LOOP=$LOOP" | tee $GITHUB_ENV
          sudo partprobe "$LOOP" || true
          sudo fdisk -l "$LOOP" || true
          sudo mount ${LOOP}p2 /mnt/imgroot
          sudo mount ${LOOP}p1 /mnt/imgboot

      - name: Apply overlay (root filesystem)
        shell: bash
        run: |
          set -euxo pipefail
          sudo rsync -a overlay/ /mnt/imgroot/

      - name: Apply boot-side (repo URL etc.)
        shell: bash
        run: |
          set -euxo pipefail
          sudo mkdir -p /mnt/imgboot/sf20
          # FAT-safe rsync (no permissions/owners/groups on FAT)
          sudo rsync -rltD --no-perms --no-owner --no-group --modify-window=2 \
            os-pack/boot-side/sf20/ /mnt/imgboot/sf20/

      - name: Enable services inside target image
        shell: bash
        run: |
          set -euxo pipefail
          sudo systemctl --root=/mnt/imgroot enable sf20-firstboot.service
          sudo systemctl --root=/mnt/imgroot is-enabled sf20-firstboot.service || true

      - name: Unmount & detach
        if: always()
        shell: bash
        run: |
          set -euxo pipefail
          sync || true
          sudo umount /mnt/imgboot || true
          sudo umount /mnt/imgroot || true
          if [ -n "${LOOP:-}" ]; then sudo losetup -d "$LOOP" || true; fi
          sudo rm -rf /mnt/imgboot /mnt/imgroot || true

      - name: Recompress image (rename by board)
        shell: bash
        run: |
          set -euxo pipefail
          BASENAME="${{ steps.base.outputs.basename }}"
          SHORTNAME="${{ steps.base.outputs.shortname }}"
          xz -9v "build/${BASENAME}.img"
          mv "build/${BASENAME}.img.xz" "build/sf20-${SHORTNAME}.img.xz"
          ls -lh build

      - name: Upload artifact (.img.xz)
        uses: actions/upload-artifact@v4
        with:
          name: sf20-${{ steps.base.outputs.shortname }}
          path: build/sf20-*.img.xz
          if-no-files-found: error
